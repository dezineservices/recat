<?php

define('RECAT_LIBRARY_VOCABULARY_NAME', 'tags');

function recat_library_menu() {
    $items = array();
    $items['admin/config/recat/library'] = array(
        'title' => t('Library settings'),
        'description' => t('Change the different file library settings.'),
        'page callback' => 'drupal_get_form',
        'page arguments' => array('recat_library_admin'),
        'access arguments' => array('administer site configuration'),
        'file' => 'recat_library.admin.inc',
    );

    $items[_recat_library_get_url()] = array(
        'title' => 'Recat library service',
        'page callback' => 'recat_library_ajax',
        'delivery callback' => 'drupal_json_output',
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'file' => 'recat_library.ajax.inc',
    );

    $items[_recat_library_get_url('download')] = array(
        'title' => 'Recat library file download',
        'page callback' => 'recat_library_download',
        'page arguments' => array(3),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'file' => 'recat_library.download.inc',
    );

    return $items;
}

function recat_library_theme() {
    return array(
        'recat_library' => array(
            'template' => 'templates/block',
            'variables' => array(
                'tags' => array(),
            ),
        ),
        'recat_library_tags' => array(
            'template' => 'templates/tags',
            'variables' => array(
                'title' => null,
                'tags' => array(),
            ),
        ),
    );
}

function recat_library_block_info() {
    $blocks = array();
    $blocks['recat_library'] = array(
        'info' => t('Files library'),
        'cache' => DRUPAL_CACHE_PER_PAGE,
        'visibility' => BLOCK_VISIBILITY_NOTLISTED,
        'pages' => '',
    );


    $blocks['recat_library_simple'] = array(
        'info' => t('Files library simple'),
        'cache' => DRUPAL_NO_CACHE,
        'visibility' => BLOCK_VISIBILITY_NOTLISTED,
        'pages' => '',
    );

    return $blocks;
}

function recat_library_block_configure($delta = '') {
    switch ($delta) {
        case 'recat_library':
        case 'recat_library_simple':
            module_load_include('blocks.inc', 'recat_library', 'recat_library');
            return _recat_library_block_configure($delta);

    }
}

function recat_library_block_view($delta = '') {
    switch ($delta) {
        case 'recat_library':
            module_load_include('blocks.inc', 'recat_library', 'recat_library');
            return array(
                'title' => '<none>',
                'content' => _recat_library_block_view($delta),
            );
        case 'recat_library_simple':
            module_load_include('blocks.inc', 'recat_library', 'recat_library');
            return array(
                'title' => '<none>',
                'content' => _recat_library_block_simple_view($delta),
            );
    }
}

function recat_library_shortcode_info() {
    $shortcodes = array();

    $shortcodes['recat_library'] = array(
        'title' => t('Recat library'),
        'description' => t('Embed recat library block'),
        'process callback' => 'recat_library_shortcode_block_process',
        'tips callback' => 'recat_library_shortcode_block_tips',
        'default settings' => array(),
    );

    return $shortcodes;
}

function recat_library_shortcode_block_process($attrs) {
    if (!isset($attrs['tag']) || empty($attrs['tag'])) {
        return;
    }

    $tag = taxonomy_get_term_by_name($attrs['tag']);
    if (!$tag) {
        return;
    }

    $tag = array_shift($tag);
    $vocabulary = taxonomy_vocabulary_load($tag->vid);

    if (!$vocabulary || $vocabulary->machine_name !== RECAT_LIBRARY_VOCABULARY_NAME) {
        return;
    }

    return sprintf('[recat_library tid="%d" /]', $tag->tid);
}

function recat_library_shortcode_block_tips() {
    return '<p><strong>[recat_library tag="term_name"]</strong>';
}

function recat_library_field_attach_view_alter(&$output, $context) {
    $fieldName = array_keys($output);

    if ($items = field_get_items($context['entity_type'], $context['entity'], $fieldName[0])) {
        $parseForCode = array();
        foreach ($items as $key => $item) {
            if (isset($item['format'])) {
                $codes = shortcode_list_all_enabled($item['format']);
                if (isset($codes['recat_library'])) {
                    $parseForCode[] = $key;
                }
            }
        }

        foreach ($parseForCode as $key) {
            if (isset($output[$fieldName[0]][$key]['#markup'])) {
                $markup = $output[$fieldName[0]][$key]['#markup'];

                $markup = preg_replace_callback('/(<p>)?\[recat_library(.*?)\/](<\/p>)?/', function ($matches) {
                    $attributes = array();
                    preg_match_all('/(tid)\=[\"](.*?)[\"]/', $matches[2], $attributes);

                    $tid = $attributes[2][array_search('tid', $attributes[1])];
                    $term = taxonomy_term_load($tid);

                    $block = block_load('recat_library', 'recat_library_simple');
                    $block_renderable = _block_get_renderable_array(
                        _block_render_blocks(array($block))
                    );

                    $block_renderable['recat_library_recat_library_simple']['#attached']['js'][] = array(
                        'data' => array('recatLibrary' => array(
                            'tid' => $term->tid,
                        )),
                        'type' => 'setting',
                    );

                    return render($block_renderable);
                }, $markup);

                $output[$fieldName[0]][$key]['#markup'] = $markup;
            }
        }
    }
}

function recat_library_webform_submission_presave($node, &$submission) {
    $cid_recat_file = false;
    foreach ($node->webform['components'] as $component) {
        if ($component['form_key'] === 'recat_file') {
            $cid_recat_file = $component['cid'];
            continue;
        }
    }

    if ($cid_recat_file === false) {
        return;
    }

    if (!isset($submission->data[$cid_recat_file])
        || empty($submission->data[$cid_recat_file][0])) {
        return;
    }

    $node = node_load($submission->data[$cid_recat_file][0]);
    if (!$node) {
        return;
    }

    $value = sprintf('%s (node/%d)', $node->title, $node->nid);
    $submission->data[$cid_recat_file][0] = $value;
}

function _recat_library_get_url($type = 'ajax', $parameter = false) {
    $url = '';
    switch ($type) {
        case 'ajax':
            $url = 'ajax/recat/library';
            break;
        case 'download':
            $url = 'recat/library/download/%';
            break;
    }

    if ($parameter) {
        $url = str_replace('%', $parameter, $url);
    }

    return $url;
}

function _recat_library_get_file($hash) {
    $query = db_select('file_managed', 'f');

    $query
        ->fields('f', array('fid'))
        ->condition('status', 1)
        ->condition('hash', $hash)
        ->range(0, 1);

    return $query->execute()->fetch();
}

function _recat_library_get_nodes($tids = array(), $tid_where = 'OR', $limit = 10, $order_by = 'n.title', $order_direction = 'ASC') {
    global $language;

    $query = db_select('node', 'n')
        ->extend('RecatCorePager');

    $query
        ->fields('n', array('nid'))
        ->condition('n.status', 1)
        ->condition('n.language', $language->language)
        ->condition('n.type', 'file')
        ->orderBy($order_by, $order_direction)
        ->addTag('node_access')
        ->limit($limit);

    if (!empty($tids)) {
        $query->join('field_data_field_tags', 'tags', 'tags.entity_id = n.nid');
        $query->condition('tags.entity_type', 'node');

        $query->condition('tags.field_tags_tid', $tids, 'IN')
            ->groupBy('tags.entity_id');

        if ($tid_where === 'AND') {
            $query->havingCondition('tags_file', count($tids))
                ->addExpression('COUNT(DISTINCT tags.field_tags_tid)', 'tags_file');
        }
    }

    $nids = $query->execute()->fetchAllAssoc('nid');

    return array($query->getCurrentPage(),  $query->getTotalPages(), $query->getTotalItemCount(), $nids);
}

function _recat_library_get_vocabulary() {
    $vocabulary = taxonomy_vocabulary_machine_name_load(RECAT_LIBRARY_VOCABULARY_NAME);
    if (!$vocabulary) {
        return null;
    }

    if (module_exists('i18n_taxonomy')) {
        $vocabulary->name = i18n_taxonomy_vocabulary_name($vocabulary);
    }

    return $vocabulary;
}

function _recat_library_get_tags() {
    $tags = array();
    $vocabulary = taxonomy_vocabulary_machine_name_load(RECAT_LIBRARY_VOCABULARY_NAME);

    if (!$vocabulary) {
        return $tags;
    }

    $tags = taxonomy_get_tree($vocabulary->vid, 0, 1);
    if (!$tags) {
        return $tags;
    }

    if (module_exists('i18n_taxonomy')) {
        $tags = i18n_taxonomy_localize_terms($tags);
    }

    return $tags;
}

function _recat_library_get_settings($key = 'recat_library') {
    return variable_get($key, false);
}

function _recat_library_is_taxonomy_page($term) {
    return $term->vocabulary_machine_name === RECAT_LIBRARY_VOCABULARY_NAME;
}