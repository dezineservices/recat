<?php

define('HS_DEFAULT_PASSWORD', 'saeco581');
define('HS_DEFAULT_MAIL', 'mike.vranckx@lbi.com');

function hs_install()
{
    $filtered_html_format = _hs_text_formats();
    _hs_node_types();
    _hs_rdf_mapping();
    _hs_user();
    _hs_vocabulary();
    _hs_permissions_administrator($filtered_html_format);
    _hs_permissions_content_uploader($filtered_html_format);
    _hs_menu();
    _hs_theme();
    _hs_languages();
    _hs_i18n_settings();
    _hs_entity_url();
    _hs_wysiwyg_editor();
    _hs_imce();
    _hs_url_alias_patterns();
    _hs_globalredirect_settings();
    _hs_cron_settings();
    _hs_metatag_settings();
    _hs_xmlsitemap_settings();
	_hs_linkit_settings();
    _hs_date_formats();
}

function _hs_text_formats()
{
    // Add text formats.
    $filtered_html_format = array(
        'format' => 'filtered_html',
        'name' => 'Filtered HTML',
        'weight' => 0,
        'filters' => array(
            'filter_url' => array(
                'weight' => -10,
                'status' => 1,
                'filter_url_length' => '72',
            ),
            'filter_html' => array(
                'weight' => -9,
                'status' => 1,
                'settings' => array(
                    'allowed_html' => '<p> <a> <em> <strong> <cite> <blockquote> <code> <ul> <ol> <li> <dl> <dt> <dd> <h2> <h3> <h4> <h5> <h6> <span> <div> <img> <br> <table> <thead> <tbody> <tfoot> <tr> <th> <td>',
                    'filter_html_help' => 1,
                    'filter_html_nofollow' => 0,
                ),
            ),
            'filter_autop' => array(
                'weight' => -8,
                'status' => 1,
            ),
            'filter_html_escape' => array(
                'weight' => -7,
                'status' => 0,
            ),
            'filter_htmlcorrector' => array(
                'weight' => -6,
                'status' => 1,
            ),
            'pathologic' => array(
                'weight' => -5,
                'module' => 'pathologic',
                'local_path' => '',
                'protocol_style' => 'path',
            ),
        ),
    );

    $filtered_html_format = (object) $filtered_html_format;
    filter_format_save($filtered_html_format);

    $full_html_format = array(
        'format' => 'full_html',
        'name' => 'Full HTML',
        'weight' => 1,
        'filters' => array(
            'filter_url' => array(
                'weight' => 0,
                'status' => 1,
            ),
            'filter_autop' => array(
                'weight' => 1,
                'status' => 1,
            ),
            'filter_htmlcorrector' => array(
                'weight' => 10,
                'status' => 1,
            ),
            'pathologic' => array(
                'local_path' => '',
                'protocol_style' => 'path',
            ),
        ),
    );

    $full_html_format = (object) $full_html_format;
    filter_format_save($full_html_format);

    return $filtered_html_format;
}

function _hs_node_types()
{
    // Insert default pre-defined node types into the database. For a complete
    // list of available node type attributes, refer to the node type API
    // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
    $types = array(
        array(
            'type' => 'page',
            'name' => st('Basic page'),
            'base' => 'node_content',
            'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
            'custom' => 1,
            'modified' => 1,
            'locked' => 0,
        ),
        array(
            'type' => 'article',
            'name' => st('Article'),
            'base' => 'node_content',
            'description' => st('Use <em>articles</em> for time-sensitive content like news, press releases or blog posts.'),
            'custom' => 1,
            'modified' => 1,
            'locked' => 0,
        ),
    );

    foreach ($types as $type) {
        $type = node_type_set_defaults($type);
        node_type_save($type);
        node_add_body_field($type);
    }

    $bundle_settings = field_bundle_settings('node', 'page');
    foreach (array('default', 'teaser') as $view_mode) {
        $bundle_settings['extra_fields']['display']['language'][$view_mode] = array(
            'visible' => false,
            'weight' => 1,
        );
    }

    $content_types = array('page', 'article');

    if (module_exists('webform')) {
        $content_types[] = 'webform';
    }

    $i18n_config = array(
        'options' => array('current', 'required'),
        'extended' => '1',
        'language' => '2',
    );

    foreach ($content_types as $content_type) {
        field_bundle_settings('node', $content_type, $bundle_settings);

        variable_set(sprintf('node_options_%s', $content_type), array('status'));

        variable_set(sprintf('i18n_node_options_%s', $content_type), $i18n_config['options']);
        variable_set(sprintf('i18n_node_extended_%s', $content_type), $i18n_config['extended']);
        variable_set(sprintf('language_content_type_%s', $content_type), $i18n_config['language']);

        variable_set(sprintf('node_submitted_%s', $content_type), false);
    }
}

function _hs_rdf_mapping()
{
    if (!module_exists('rdf')) {
        return false;
    }

    $rdf_mappings = array(
        array(
            'type' => 'node',
            'bundle' => 'page',
            'mapping' => array(
                'rdftype' => array('foaf:Document'),
            ),
        ),
        array(
            'type' => 'node',
            'bundle' => 'article',
            'mapping' => array(
                'field_image' => array(
                    'predicates' => array('og:image', 'rdfs:seeAlso'),
                    'type' => 'rel',
                ),
                'field_tags' => array(
                    'predicates' => array('dc:subject'),
                    'type' => 'rel',
                ),
            ),
        ),
    );

    foreach ($rdf_mappings as $rdf_mapping) {
        rdf_mapping_save($rdf_mapping);
    }
}

function _hs_user()
{
    variable_set('user_register', USER_REGISTER_ADMINISTRATORS_ONLY);
}

function _hs_vocabulary()
{
    $description = st('Use tags to group articles on similar topics into categories.');
    $help = st('Enter a comma-separated list of words to describe your content.');
    $vocabulary = (object) array(
            'name' => st('Tags'),
            'description' => $description,
            'machine_name' => 'tags',
            'help' => $help,
    );
    taxonomy_vocabulary_save($vocabulary);

    $field = array(
        'field_name' => 'field_' . $vocabulary->machine_name,
        'type' => 'taxonomy_term_reference',
        'cardinality' => FIELD_CARDINALITY_UNLIMITED,
        'settings' => array(
            'allowed_values' => array(
                array(
                    'vocabulary' => $vocabulary->machine_name,
                    'parent' => 0,
                ),
            ),
        ),
    );
    field_create_field($field);

    $instance = array(
        'field_name' => 'field_' . $vocabulary->machine_name,
        'entity_type' => 'node',
        'label' => 'Tags',
        'bundle' => 'article',
        'description' => $vocabulary->help,
        'widget' => array(
            'type' => 'taxonomy_autocomplete',
            'weight' => -4,
        ),
        'display' => array(
            'default' => array(
                'type' => 'taxonomy_term_reference_link',
                'weight' => 10,
            ),
            'teaser' => array(
                'type' => 'taxonomy_term_reference_link',
                'weight' => 10,
            ),
        ),
    );
    field_create_instance($instance);
}

function _hs_permissions_administrator($filtered_html_format)
{
    $filtered_html_permission = filter_permission_name($filtered_html_format);
    user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content'));

    $admin_role = new stdClass();
    $admin_role->name = 'administrator';
    $admin_role->weight = 2;

    user_role_save($admin_role);
    user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));

    variable_set('user_admin_role', $admin_role->rid);

    db_insert('users_roles')
        ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
        ->execute();
}

function _hs_permissions_content_uploader($filtered_html_format)
{
    $content_uploader_role = new stdClass();
    $content_uploader_role->name = 'content uploader';
    $content_uploader_role->weight = 1;

    user_role_save($content_uploader_role);
    user_role_grant_permissions($content_uploader_role->rid, array(
        'access administration pages',
        'access all webform results',
        'access content',
        'access content overview',
        'access contextual links',
        'access dashboard',
        'access own webform results',
        'access own webform submissions',
        'access site in maintenance mode',
        'access site reports',
        'access toolbar',
        'access user profiles',
        'administer blocks',
        'administer content translations',
        'administer image styles',
        'administer languages',
        'administer menu',
        'administer shortcuts',
        'administer taxonomy',
        'cancel account',
        'change own username',
        'create article content',
        'create page content',
        'create url aliases',
        'create webform content',
        'customize shortcut links',
        'delete all webform submissions',
        'delete any article content',
        'delete any page content',
        'delete any webform content',
        'delete own article content',
        'delete own page content',
        'delete own webform content',
        'delete own webform submissions',
        'delete revisions',
        'delete terms in 1',
        'edit all webform submissions',
        'edit any article content',
        'edit any page content',
        'edit any webform content',
        'edit own article content',
        'edit own page content',
        'edit own webform content',
        'edit own webform submissions',
        'edit terms in 1',
        'revert revisions',
        'switch shortcut sets',
        'translate content',
        'translate interface',
        'translate user-defined strings',
        'use text format filtered_html',
        'view own unpublished content',
        'view revisions',
        'view the administration theme',
    ));

    $rid = array_search('content uploader', user_roles());

    user_save('', array(
        'name' => 'webmaster',
        'pass' => HS_DEFAULT_PASSWORD,
        'status' => 1,
        'mail' => HS_DEFAULT_MAIL,
        'init' => HS_DEFAULT_MAIL,
        'timezone' => 'Europe/Brussels',
        'roles' => array(
            DRUPAL_AUTHENTICATED_RID => 'authenticated user',
            $rid => 'content uploader',
        ),
    ));
}

function _hs_menu()
{
    $item = array(
        'link_title' => st('Home'),
        'link_path' => '<front>',
        'menu_name' => 'main-menu',
        'language' => 'en',
    );

    menu_link_save($item);
    menu_rebuild();
}

function _hs_theme()
{
    db_update('system')
        ->fields(array('status' => 1))
        ->condition('type', 'theme')
        ->condition('name', 'seven')
        ->execute();

    variable_set('admin_theme', 'seven');
    variable_set('node_admin_theme', '1');
}

function _hs_languages()
{
    db_update('languages')
        ->fields(array('prefix' => 'en'))
        ->condition('language', 'en')
        ->execute();

    locale_add_language('nl');
    locale_add_language('fr');

    variable_set('language_negotiation_language', array(
        'locale-url' => array(
            'callbacks' => array(
                'language' => 'locale_language_from_url',
                'switcher' => 'locale_language_switcher_url',
                'url_rewrite' => 'locale_language_url_rewrite_url',
            ),
            'file' => 'includes/locale.inc',
        ),
        'language-default' => array(
            'callbacks' => array(
                'language' => 'language_from_default',
            ),
        ),
    ));

    variable_set('locale_language_providers_weight_language', array(
        'locale-url' => '-8',
        'locale-session' => '-6',
        'locale-user' => '-4',
        'locale-browser' => '-2',
        'language-default' => '10',
    ));
}

function _hs_i18n_settings()
{
    variable_set('i18n_hide_translation_links', 1);
    variable_set('i18n_node_default_language_none', '0');
    variable_set('i18n_string_source_language', 'en');

    variable_set('i18n_string_allowed_formats', array(
        'filtered_html' => 'filtered_html',
        'plain_text' => 'plain_text',
        'full_html' => 0,
    ));

    menu_save(array(
        'menu_name' => 'main-menu',
        'title' => 'Main menu',
        'description' => 'The <em>Main</em> menu is used on many sites to show the major sections of the site, often in a top navigation bar.',
        'language' => 'und',
        'i18n_mode' => I18N_MODE_MULTIPLE,
    ));
}

function _hs_entity_url()
{
    variable_set('clean_url', TRUE);
}

function _hs_wysiwyg_editor()
{
    $settings = array(
        'default' => 1,
        'user_choose' => 0,
        'show_toggle' => 0,
        'theme' => 'advanced',
        'language' => 'en',
        'buttons' =>
        array(
            'default' =>
            array(
                'Bold' => 1,
                'Italic' => 1,
                'Underline' => 1,
                'Strike' => 1,
                'JustifyLeft' => 1,
                'JustifyCenter' => 1,
                'JustifyRight' => 1,
                'JustifyBlock' => 1,
                'BulletedList' => 1,
                'NumberedList' => 1,
                'Outdent' => 1,
                'Indent' => 1,
                'Undo' => 1,
                'Redo' => 1,
                'Link' => 1,
                'Unlink' => 1,
                'Anchor' => 1,
                'Image' => 1,
                'Superscript' => 1,
                'Subscript' => 1,
                'Blockquote' => 1,
                'Source' => 1,
                'HorizontalRule' => 1,
                'Cut' => 1,
                'Copy' => 1,
                'Paste' => 1,
                'PasteText' => 1,
                'PasteFromWord' => 1,
                'ShowBlocks' => 1,
                'RemoveFormat' => 1,
                'Format' => 1,
                'Font' => 1,
                'FontSize' => 1,
                'Styles' => 1,
                'Table' => 1,
                'Flash' => 1,
                'CreateDiv' => 1,
                'Iframe' => 1,
                'Maximize' => 1,
            ),
            'imce' =>
            array(
                'imce' => 1,
            ),
            'drupal' =>
            array(
                'break' => 1,
            ),
        ),
        'toolbar_loc' => 'top',
        'toolbar_align' => 'left',
        'path_loc' => 'bottom',
        'resizing' => 1,
        'verify_html' => 1,
        'preformatted' => 0,
        'convert_fonts_to_spans' => 1,
        'remove_linebreaks' => 1,
        'apply_source_formatting' => 0,
        'paste_auto_cleanup_on_paste' => 0,
        'block_formats' => 'p,h2,h3,h4,h5,h6,div,address,pre',
        'css_setting' => 'self',
        'css_path' => '%t/design/css/ckeditor.css',
        'css_classes' => '',
    );

    $filter_html = array('format' => 'filtered_html', 'editor' => 'ckeditor', 'settings' => $settings);
    $full_html = array('format' => 'full_html', 'editor' => 'ckeditor', 'settings' => $settings);
    $plain_text = array('format' => 'plain_text', 'editor' => '');

    drupal_write_record('wysiwyg', $filter_html);
    drupal_write_record('wysiwyg', $full_html);
    drupal_write_record('wysiwyg', $plain_text);

    wysiwyg_profile_cache_clear();

    db_update('filter')
        ->fields(array('status' => 1, 'settings' => serialize(array('local_paths' => '', 'protocol_style' => 'path'))))
        ->condition('module', 'pathologic', '=')
        ->condition('name', 'pathologic', '=')
        ->execute();
}

function _hs_imce()
{
    variable_set('imce_profiles', array(
        1 => array(
            'name' => 'IMCE',
            'usertab' => 0,
            'filesize' => 0,
            'quota' => 0,
            'tuquota' => 0,
            'extensions' => '*',
            'dimensions' => '1200x1200',
            'filenum' => 0,
            'directories' => array(
                array(
                    'name' => 'rte',
                    'subnav' => 1,
                    'browse' => 1,
                    'upload' => 1,
                    'thumb' => 1,
                    'delete' => 1,
                    'resize' => 1,
                ),
            ),
            'thumbnails' => array(),
        ),
    ));

    variable_set('imce_roles_profiles', array(
        1 => array(
            'weight' => 12,
            'public_pid' => 0,
        ),
        2 => array(
            'weight' => 11,
            'public_pid' => 0,
        ),
        3 => array(
            'weight' => 0,
            'public_pid' => 1,
        ),
        4 => array(
            'weight' => 0,
            'public_pid' => 1,
        ),
    ));
}

function _hs_url_alias_patterns()
{
    variable_set('pathauto_node_pattern', '[node:menu-link:parents:join-path]/[node:title]');
}

function _hs_globalredirect_settings()
{
    variable_set('globalredirect_settings', array(
        'language_redirect' => true,
        'canonical' => true,
        'content_location_header' => true,
    ));
}

function _hs_cron_settings()
{
    variable_set('cron_safe_threshold', '0');
}

function _hs_metatag_settings()
{
    _hs_metatag_settings_global();
    _hs_metatag_settings_front();
    _hs_metatag_settings_node();
    _hs_metatag_settings_taxonomy();
    _hs_metatag_settings_user();
}

function _hs_metatag_settings_global()
{
    $config = new stdClass();
    $config->disabled = false;
    $config->api_version = 1;
    $config->instance = 'global';
    $config->config = array(
        'title' => array(
            'value' => '[current-page:title] - [site:name]',
        ),
        'description' => array(
            'value' => '',
        ),
        'abstract' => array(
            'value' => '',
        ),
        'keywords' => array(
            'value' => '',
        ),
        'robots' => array(
            'value' => array(
                'index' => 'index',
                'follow' => 'follow',
                'noindex' => 0,
                'nofollow' => 0,
                'noarchive' => 0,
                'nosnippet' => 0,
                'noodp' => 0,
                'noydir' => 0,
            ),
        ),
        'news_keywords' => array(
            'value' => '',
        ),
        'generator' => array(
            'value' => '',
        ),
        'copyright' => array(
            'value' => '',
        ),
        'image_src' => array(
            'value' => '',
        ),
        'canonical' => array(
            'value' => '[current-page:url:absolute]',
        ),
        'shortlink' => array(
            'value' => '[current-page:url:unaliased]',
        ),
        'publisher' => array(
            'value' => '',
        ),
        'author' => array(
            'value' => '',
        ),
        'original-source' => array(
            'value' => '',
        ),
        'fb:admins' => array(
            'value' => '',
        ),
        'fb:app_id' => array(
            'value' => '',
        ),
        'og:site_name' => array(
            'value' => '[site:name]',
        ),
        'og:title' => array(
            'value' => '[current-page:title]',
        ),
        'og:description' => array(
            'value' => '',
        ),
        'og:type' => array(
            'value' => 'article',
        ),
        'og:image' => array(
            'value' => '',
        ),
        'og:url' => array(
            'value' => '[current-page:url:absolute]',
        ),
        'og:latitude' => array(
            'value' => '',
        ),
        'og:longitude' => array(
            'value' => '',
        ),
        'og:street-address' => array(
            'value' => '',
        ),
        'og:locality' => array(
            'value' => '',
        ),
        'og:region' => array(
            'value' => '',
        ),
        'og:postal-code' => array(
            'value' => '',
        ),
        'og:country-name' => array(
            'value' => '',
        ),
        'og:email' => array(
            'value' => '',
        ),
        'og:phone_number' => array(
            'value' => '',
        ),
        'og:fax_number' => array(
            'value' => '',
        ),
        'og:video' => array(
            'value' => '',
        ),
        'og:video:secure_url' => array(
            'value' => '',
        ),
        'og:video:width' => array(
            'value' => '',
        ),
        'og:video:height' => array(
            'value' => '',
        ),
        'og:video:type' => array(
            'value' => '',
        ),
    );

    metatag_config_save($config);
}

function _hs_metatag_settings_front()
{
    $config = new stdClass();
    $config->disabled = false;
    $config->api_version = 1;
    $config->instance = 'global:frontpage';
    $config->config = array(
        'title' => array(
            'value' => '[site:name] - [site:slogan]',
        ),
        'robots' => array(
            'value' => array(
                'index' => 'index',
                'follow' => 'follow',
                'noindex' => 0,
                'nofollow' => 0,
                'noarchive' => 0,
                'nosnippet' => 0,
                'noodp' => 0,
                'noydir' => 0,
            ),
        ),
        'generator' => array(
            'value' => '',
        ),
        'canonical' => array(
            'value' => '[site:url]',
        ),
        'shortlink' => array(
            'value' => '[site:url]',
        ),
        'og:title' => array(
            'value' => '[site:name]',
        ),
        'og:type' => array(
            'value' => 'website',
        ),
        'og:url' => array(
            'value' => '[site:url]',
        ),
    );
    
    metatag_config_save($config);
}

function _hs_metatag_settings_node()
{
    $config = new stdClass();
    $config->disabled = false;
    $config->api_version = 1;
    $config->instance = 'node';
    $config->config = array(
        'description' => array(
            'value' => '[node:summary]',
        ),
        'og:title' => array(
            'value' => '[node:title]',
        ),
        'og:description' => array(
            'value' => '[node:summary]',
        ),
    );
    
    metatag_config_save($config);
}

function _hs_metatag_settings_taxonomy()
{
    $config = new stdClass();
    $config->disabled = false;
    $config->api_version = 1;
    $config->instance = 'taxonomy_term';
    $config->config = array(
        'description' => array(
            'value' => '[term:description]',
        ),
        'og:title' => array(
            'value' => '[term:name]',
        ),
        'og:description' => array(
            'value' => '[term:description]',
        ),
    );
    
    metatag_config_save($config);
}

function _hs_metatag_settings_user()
{
    $config = new stdClass();
    $config->disabled = false;
    $config->api_version = 1;
    $config->instance = 'user';
    $config->config = array(
        'og:title' => array(
            'value' => '[user:name]',
        ),
        'og:type' => array(
            'value' => 'profile',
        ),
    );
    
    metatag_config_save($config);
}

function _hs_xmlsitemap_settings()
{
    variable_set('xmlsitemap_batch_limit', '100');
    variable_set('xmlsitemap_chunk_size', 'auto');
    variable_set('xmlsitemap_frontpage_changefreq', '86400');
    variable_set('xmlsitemap_frontpage_priority', '1.0');
    variable_set('xmlsitemap_generated_last', 0);
    variable_set('xmlsitemap_minimum_lifetime', '86400');
    variable_set('xmlsitemap_path', 'xmlsitemap');
    variable_set('xmlsitemap_prefetch_aliases', 1);
    variable_set('xmlsitemap_rebuild_needed', false);
    variable_set('xmlsitemap_regenerate_needed', false);
    variable_set('xmlsitemap_xsl', 0);
    variable_set('xmlsitemap_settings_menu_link_main-menu', array(
        'status' => '1',
        'priority' => '0.5',
    ));
    
    db_delete('xmlsitemap_sitemap')
        ->execute();
    
    foreach (language_list() as $language) {
        $sitemap = new stdClass();
        $sitemap->context = array(
            'language' => $language->language,
        );
        
        xmlsitemap_sitemap_save($sitemap);
    }
}

function _hs_linkit_settings()
{
	$linkit_profile = new LinkitProfile();
	$linkit_profile->disabled = false;
	$linkit_profile->api_version = 1;
	$linkit_profile->name = 'linkit';
	$linkit_profile->admin_title = 'Linkit';
	$linkit_profile->admin_description = 'Linkit profile';
	$linkit_profile->profile_type = '1';
	$linkit_profile->data = array(
	  'text_formats' => array(
		'filtered_html' => 'filtered_html',
		'full_html' => 'full_html',
		'plain_text' => 0,
	  ),
	  'search_plugins' => array(
		'entity:user' => array(
		  'enabled' => 0,
		  'weight' => '-10',
		),
		'entity:file' => array(
		  'enabled' => 0,
		  'weight' => '-10',
		),
		'entity:node' => array(
		  'enabled' => 1,
		  'weight' => '-10',
		),
		'entity:taxonomy_term' => array(
		  'enabled' => 1,
		  'weight' => '-10',
		),
		'entity:menu_link' => array(
		  'enabled' => 0,
		  'weight' => '-10',
		),
	  ),
	  'entity:node' => array(
		'result_description' => '',
		'bundles' => array(
		  'article' => 0,
		  'page' => 0,
		  'webform' => 0,
		),
		'group_by_bundle' => 1,
		'include_unpublished' => 0,
	  ),
	  'entity:file' => array(
		'result_description' => '',
		'show_scheme' => 0,
		'group_by_scheme' => 0,
		'image_extra_info' => array(
		  'thumbnail' => 'thumbnail',
		  'dimensions' => 'dimensions',
		),
	  ),
	  'entity:taxonomy_term' => array(
		'result_description' => '',
	  ),
	  'entity:user' => array(
		'result_description' => '',
	  ),
	  'entity:menu_link' => array(
		'result_description' => '',
		'bundles' => array(
		  'devel' => 0,
		  'main-menu' => 0,
		  'management' => 0,
		  'navigation' => 0,
		  'user-menu' => 0,
		),
		'group_by_bundle' => 1,
	  ),
	  'insert_plugin' => array(
		'url_method' => '1',
	  ),
	  'attribute_plugins' => array(
		'accesskey' => array(
		  'enabled' => 0,
		  'weight' => '-10',
		),
		'target' => array(
		  'enabled' => 1,
		  'weight' => '-10',
		),
		'class' => array(
		  'enabled' => 1,
		  'weight' => '-10',
		),
		'rel' => array(
		  'enabled' => 0,
		  'weight' => '-10',
		),
		'id' => array(
		  'enabled' => 0,
		  'weight' => '-10',
		),
		'title' => array(
		  'enabled' => 1,
		  'weight' => '-10',
		),
	  ),
	  'imce' => 1,
	  'autocomplete' => array(
		'charLimit' => '3',
		'wait' => '350',
		'remoteTimeout' => '10000',
	  ),
	);

	ctools_export_crud_save('linkit_profiles', $linkit_profile);
}

function _hs_date_formats()
{
    db_insert('date_format_type')
        ->fields(array(
            'type' => 'tiny',
            'title' => 'Tiny',
            'locked' => 1,
        ))
        ->execute();

    db_insert('date_formats')
        ->fields(array(
            'format' => 'd/m/Y',
            'type' => 'tiny',
            'locked' => 1,
        ))
        ->execute();

    variable_set('date_format_tiny', 'd/m/Y');
}